class SimpleStream

  (name, logger) ->
    @name = name   # for debugging
    @listeners = {}; @onceListeners = {}
    @logger = logger

  on: (event, callback) ~>
    @listeners[event] = [] if not @listeners[event]?
    @listeners[event].push callback

  once: (event, callback) ~>
    @onceListeners[event] = [] if not @onceListeners[event]?
    @onceListeners[event].push callback

  off: (event, callback) ~>
    return if not @listeners[event]?
    idx = @listeners[event].indexOf callback
    @listeners[event].splice idx, 1

  write: (payload) ~>
    return if not payload?
    return if payload.length is 0
    if @logger? then @logger @name, payload, process.hrtime.bigint()
    if @listeners.data?
      @listeners.data.map (fcn) ~> fcn payload
    if @onceListeners.data?
      @onceListeners.data.map (handler) -> handler payload
      @onceListeners.data = []



module.exports = SimpleStream
