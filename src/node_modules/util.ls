path = require 'path'
passert_ = require 'assert'
StackTrace = require 'stacktrace-js'
M = (s) -> console.log s; s
E = (s) -> process.stderr.write s + "\n"; s


# assert with an added feature: count each pass each passed assertion
#   on exit, report the number of asserts
#   (make sure things were tested)
nasserts = 0
assert = (chk, frameNo) ->
  return nasserts++ if chk
  frameNo = frameNo or 1
  M "[FAIL] assertion failed"
  S = StackTrace.getSync()
  M "#{path.basename S[frameNo].fileName}: #{S[frameNo].lineNumber}: [FAIL] assertion failed!"
  throw 'assert fail'

assert_reporter = (code) ->
  console.log("[INFO] #{nasserts} asserts succeeded")
  process.exit(code)
set_summary = (b) ->
  if b
    process.on 'exit', assert_reporter
  else
    process.off 'exit', assert_reporter


# test util (abstracts away repeated crap due to async streams, listeners)
expect = (stream, registrar, event, messages) ->

  messages = switch event

    when "data" then messages.map (data) ->
      return data if Buffer.isBuffer data
      assert typeof(data) is 'string'
      Buffer.from data

    when "control" then messages.map (control) ->
      assert Array.isArray control
      assert typeof(control[0]) is 'string'
      assert control[0].length is 1
      cmd = control[0].charCodeAt(0)
      payload = if control[1]? then Buffer.from JSON.stringify control[1]
      if payload?
        [cmd, payload]
      else
        [cmd]

  bufEqBuf = (a, b) ->
    assert a.byteLength is b.byteLength
    for i from 0 to a.byteLength - 1 by 1
      assert a[i] is b[i]

  dataListener = (d) ->
    assert Buffer.isBuffer(d)
    assert messages[0]
    bufEqBuf messages[0], d
    messages.shift()

  controlListener = (cmd, payload) ->
    [_cmd, _payload] = messages[0]
    assert typeof(cmd) is 'number'
    assert typeof(_cmd) is 'number'
    (assert Buffer.isBuffer payload) if payload?
    (assert Buffer.isBuffer _payload) if _payload?
    assert cmd is _cmd
    (bufEqBuf payload, _payload) if _payload?
    messages.shift()

  listener = switch event
    when "data" then dataListener
    when "control" then controlListener
    else assert false
  registrar event, listener

  ->
    if messages.length isnt 0
      M "[FAIL] did not get some messages!"
      M messages
    assert messages.length is 0
    stream.off event, listener




exports = {M, E, expect}
module.exports = exports if module?
if window? then (window.modules = {}) if not window.modules?; window.modules.util = exports
